<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    Copyright (c) 2012 Busko Trust

        * Licensed under the Apache License, Version 2.0 (the "License"); you may not
        * use this file except in compliance with the License. You may obtain a copy of
        * the License at
        *
        * http://www.apache.org/licenses/LICENSE-2.0
        *
        * Unless required by applicable law or agreed to in writing, software
        * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
        * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
        * License for the specific language governing permissions and limitations under
        * the License.
-->
<div xmlns:c="http://java.sun.com/jsp/jstl/core" xmlns:field="urn:jsptagdir:/WEB-INF/tags/form/fields" xmlns:jsp="http://java.sun.com/JSP/Page" xmlns:page="urn:jsptagdir:/WEB-INF/tags/form" xmlns:spring="http://www.springframework.org/tags" version="2.0">
    <jsp:directive.page contentType="text/html;charset=UTF-8"/>
    <jsp:output omit-xml-declaration="yes"/>
    <!-- Replace the key in the line below with an API key for your site.  You can get one here http://www.google.com/apis/maps/signup.html -->
    <script src="http://maps.google.com/maps?file=api&amp;v=2&amp;key=AIzaSyBpKJKW9xojtx1FfRgIWz6Xi42gIp9Z9ao" type="text/javascript"/>
    <!--<script src="/js/loadgpx.js" type="text/javascript"></script>-->
    <spring:url value="/admin/community/routeoutlines/${routeoutline.id}" var="gpx_url">
        <spring:param name="gpx"/>
    </spring:url>
    <page:show id="ps_org_busko_routemanager_model_transit_community_RouteOutline" object="${routeoutline}" path="/admin/community/routeoutlines" z="T1NpXHD/onLXOlnaxqNRTk+7iDs=">
        <div class="columnblock" id="map_canvas" style="height: 400px; width: 600px;">
            <script type="text/javascript">

// http://code.google.com/p/gpxviewer/
// http://notions.okuda.ca/geotagging/projects-im-working-on/gpx-viewer/

function GPXParser(xmlDoc, map)
{
	this.xmlDoc = xmlDoc;
	this.map = map;
	this.trackcolour = "#ff00ff"; // red
	this.trackwidth = 5;
	this.mintrackpointdelta = 0.0001
}

// Set the colour of the track line segements.
GPXParser.prototype.SetTrackColour = function(colour)
{
	this.trackcolour = colour;
}

// Set the width of the track line segements
GPXParser.prototype.SetTrackWidth = function(width)
{
	this.trackwidth = width;
}

// Set the minimum distance between trackpoints.
// Used to cull unneeded trackpoints from map.
GPXParser.prototype.SetMinTrackPointDelta = function(delta)
{
	this.mintrackpointdelta = delta;
}

GPXParser.prototype.TranslateName = function(name)
{
	if (name == "wpt")
	{
		return "Waypoint";
	}
	else if (name == "trkpt")
	{
		return "Track Point";
	}
}


GPXParser.prototype.CreateMarker = function(point)
{
	var lon = parseFloat(point.getAttribute("lon"));
	var lat = parseFloat(point.getAttribute("lat"));
	var html = "";

	if (point.getElementsByTagName("html").length &gt; 0)
	{
		for (i=0; i&lt;point.getElementsByTagName("html").item(0).childNodes.length; i++)
		{
			html += point.getElementsByTagName("html").item(0).childNodes[i].nodeValue;
		}
	}
	else
	{
		// Create the html if it does not exist in the point.
		html = "&lt;b&gt;" + this.TranslateName(point.nodeName) + "&lt;/b&gt;&lt;br&gt;";
		var attributes = point.attributes;
		var attrlen = attributes.length;
		for (i=0; i&lt;attrlen; i++)
		{
			html += attributes.item(i).name + " = " + attributes.item(i).nodeValue + "&lt;br&gt;";
		}

		if (point.hasChildNodes)
		{
			var children = point.childNodes;
			var childrenlen = children.length;
			for (i=0; i&lt;childrenlen; i++)
			{
				// Ignore empty nodes
				if (children[i].nodeType != 1) continue;
				if (children[i].firstChild == null) continue;
				html += children[i].nodeName + " = " + children[i].firstChild.nodeValue + "&lt;br&gt;";
			}
		}
	}

	var marker = new GMarker(new GLatLng(lat,lon));
	GEvent.addListener(marker, "click",
		function()
		{
			marker.openInfoWindowHtml(html);
		}
	);

	this.map.addOverlay(marker);


	// All methods that add items to the map return the bounding box of what they added.
	//var latlng = new GLatLng(lat,lon);
	//return new GLatLngBounds(latlng,latlng);
}


GPXParser.prototype.AddTrackSegmentToMap = function(trackSegment, colour, width)
{
	//var latlngbounds = new GLatLngBounds();

	var trackpoints = trackSegment.getElementsByTagName("trkpt");
	if (trackpoints.length == 0)
	{
		return; //latlngbounds;
	}

	var pointarray = [];

	// process first point
	var lastlon = parseFloat(trackpoints[0].getAttribute("lon"));
	var lastlat = parseFloat(trackpoints[0].getAttribute("lat"));
	var latlng = new GLatLng(lastlat,lastlon);
	pointarray.push(latlng);
	//latlngbounds.extend(latlng);

	// Create a marker at the begining of each track segment
	//this.CreateMarker(trackpoints[0]);

	for (var i=1; i &lt; trackpoints.length; i++)
	{
		var lon = parseFloat(trackpoints[i].getAttribute("lon"));
		var lat = parseFloat(trackpoints[i].getAttribute("lat"));

		// Verify that this is far enough away from the last point to be used.
		var latdiff = lat - lastlat;
		var londiff = lon - lastlon;
		if ( Math.sqrt(latdiff*latdiff + londiff*londiff) &gt; this.mintrackpointdelta )
		{
			lastlon = lon;
			lastlat = lat;
			latlng = new GLatLng(lat,lon);
			pointarray.push(latlng);
			//latlngbounds.extend(latlng);
		}

	}

	var polyline = new GPolyline(pointarray, colour, width);

	this.map.addOverlay(polyline);

	// All methods that add items to the map return the bounding box of what they added.
	//return latlngbounds;
}

GPXParser.prototype.AddTrackToMap = function(track, colour, width)
{
	var segments = track.getElementsByTagName("trkseg");
	//var latlngbounds = new GLatLngBounds();
	for (var i=0; i &lt; segments.length; i++)
	{
		var segmentlatlngbounds = this.AddTrackSegmentToMap(segments[i], colour, width);
		//this.AddTrackSegmentToMap(segments[i], colour, width);
		//latlngbounds.extend(segmentlatlngbounds.getSouthWest());
		//latlngbounds.extend(segmentlatlngbounds.getNorthEast());
	}

	// All methods that add items to the map return the bounding box of what they added.
	//return latlngbounds;
}

GPXParser.prototype.CenterAndZoom = function (trackSegment, maptype)
{

	var pointlist = new Array("trkpt", "wpt");
	var minlat = 0;
	var maxlat = 0;
	var minlon = 0;
	var maxlon = 0;

	for (var pointtype=0; pointtype &lt; pointlist.length; pointtype++)
	{

		// Center the map and zoom on the given segment.
		var trackpoints = trackSegment.getElementsByTagName(pointlist[pointtype]);

		// If the min and max are uninitialized then initialize them.
		if ( (trackpoints.length &gt; 0) &amp;&amp; (minlat == maxlat) &amp;&amp; (minlat == 0) )
		{
			minlat = parseFloat(trackpoints[0].getAttribute("lat"));
			maxlat = parseFloat(trackpoints[0].getAttribute("lat"));
			minlon = parseFloat(trackpoints[0].getAttribute("lon"));
			maxlon = parseFloat(trackpoints[0].getAttribute("lon"));
		}

		for (var i=0; i &lt; trackpoints.length; i++)
		{
			var lon = parseFloat(trackpoints[i].getAttribute("lon"));
			var lat = parseFloat(trackpoints[i].getAttribute("lat"));

			if (lon &lt; minlon) minlon = lon;
			if (lon &gt; maxlon) maxlon = lon;
			if (lat &lt; minlat) minlat = lat;
			if (lat &gt; maxlat) maxlat = lat;
		}
	}

	if ( (minlat == maxlat) &amp;&amp; (minlat == 0) )
	{
		this.map.setCenter(new GLatLng(49.327667, -122.942333), 14);
		return;
	}

	// Center around the middle of the points
	var centerlon = (maxlon + minlon) / 2;
	var centerlat = (maxlat + minlat) / 2;

	var bounds = new GLatLngBounds(new GLatLng(minlat, minlon), new GLatLng(maxlat, maxlon));

	this.map.setCenter(new GLatLng(centerlat, centerlon), this.map.getBoundsZoomLevel(bounds), maptype);
}

GPXParser.prototype.CenterAndZoomToLatLngBounds = function (latlngboundsarray)
{
	var boundingbox = new GLatLngBounds();
	for (var i=0; i&lt;latlngboundsarray.length; i++)
	{
		if (!latlngboundsarray[i].isEmpty())
		{
			boundingbox.extend(latlngboundsarray[i].getSouthWest());
			boundingbox.extend(latlngboundsarray[i].getNorthEast());
		}
	}

	var centerlat = (boundingbox.getNorthEast().lat() + boundingbox.getSouthWest().lat()) / 2;
	var centerlng = (boundingbox.getNorthEast().lng() + boundingbox.getSouthWest().lng()) / 2;
	this.map.setCenter(new GLatLng(centerlat, centerlng), this.map.getBoundsZoomLevel(boundingbox));
}


GPXParser.prototype.AddTrackpointsToMap = function ()
{
	var tracks = this.xmlDoc.documentElement.getElementsByTagName("trk");
	//var latlngbounds = new GLatLngBounds();

	for (var i=0; i &lt; tracks.length; i++)
	{
		this.AddTrackToMap(tracks[i], this.trackcolour, this.trackwidth);
		//var tracklatlngbounds = this.AddTrackToMap(tracks[i], this.trackcolour, this.trackwidth);
		//latlngbounds.extend(tracklatlngbounds.getSouthWest());
		//latlngbounds.extend(tracklatlngbounds.getNorthEast());
	}

	// All methods that add items to the map return the bounding box of what they added.
	//return latlngbounds;
}

GPXParser.prototype.AddWaypointsToMap = function ()
{
	var waypoints = this.xmlDoc.documentElement.getElementsByTagName("wpt");
	//var latlngbounds = new GLatLngBounds();

	for (var i=0; i &lt; waypoints.length; i++)
	{
		this.CreateMarker(waypoints[i]);
		//var waypointlatlngbounds = this.CreateMarker(waypoints[i]);
		//latlngbounds.extend(waypointlatlngbounds.getSouthWest());
		//latlngbounds.extend(waypointlatlngbounds.getNorthEast());
	}

	// All methods that add items to the map return the bounding box of what they added.
	//return latlngbounds;
}

    var MyMap;

    function LoadGPXFileIntoGoogleMap(map, filename)
    {
        // Remove any existing overlays from the map.
        map.clearOverlays();

        var request = GXmlHttp.create();
        request.open("GET", filename, true);
        request.onreadystatechange = function()
        {
            if (request.readyState == 4)
            {
                parser = new GPXParser(request.responseXML, map);
                parser.SetTrackColour("#ff0000");					// Set the track line colour
                parser.SetTrackWidth(5);							// Set the track line width
                parser.SetMinTrackPointDelta(0.001);				// Set the minimum distance between track points
                parser.CenterAndZoom(request.responseXML, G_NORMAL_MAP); // Center and Zoom the map over all the points.
                parser.AddTrackpointsToMap();						// Add the trackpoints
                parser.AddWaypointsToMap();							// Add the waypoints
            }
        }
        request.send(null);
    }

    function onLoad()
    {
        MyMap = new GMap2(document.getElementById("map_canvas"));
        MyMap.addControl(new GLargeMapControl());
        MyMap.addControl(new GMapTypeControl());
        LoadGPXFileIntoGoogleMap(MyMap, "${gpx_url}");
    }

    dojo.addOnLoad(function() {
     	onLoad();
    });

</script>
        </div>
        <div class="columnblock" style="height: 400px; min-height: 400px; width: 300px; margin-left: 10px;">
            <c:choose>
                <c:when test="${empty routeoutline.route}">
                    <spring:url value="/admin/community/routeoutlines/${routeoutline.id}" var="edit_url">
                        <spring:param name="form"/>
                    </spring:url>
                    This route outline needs to have its schedule information entered.<br/>
                    <br/>
                    If you are happy to do this please <a href="${edit_url}" title="Update Route Outline">click here</a>.<br/>
                </c:when>
                <c:otherwise>
                    This route has assoicated schedule informtion entered and is being reviewed for inclusion in the
                    Busko Community OneBusAway demonstration site.<br/>
                </c:otherwise>
            </c:choose>
            <br/>
            <field:display field="username" id="s_org_busko_routemanager_model_transit_community_RouteOutline_username" object="${routeoutline}" z="aD+vEKXaUO0oLtRkoiW7Ol+ocI0="/>
            <field:display field="routeName" id="s_org_busko_routemanager_model_transit_community_RouteOutline_routeName" object="${routeoutline}" z="+M3L7dx4YFA4JvaLyUwxym4HOHw="/>
            <field:display field="routeDescription" id="s_org_busko_routemanager_model_transit_community_RouteOutline_routeDescription" object="${routeoutline}" z="b5kecSL+GMgzVmhlKpW+CQIxFKc="/>
            <field:display field="fileContent" id="s_org_busko_routemanager_model_transit_community_RouteOutline_fileContent" object="${routeoutline}" render="false" z="user-managed"/>
            <field:display date="true" dateTimePattern="${routeOutline_submitteddatetime_date_format}" field="submittedDateTime" id="s_org_busko_routemanager_model_transit_community_RouteOutline_submittedDateTime" object="${routeoutline}" render="false" z="user-managed"/>
            <field:display field="route" id="s_org_busko_routemanager_model_transit_community_RouteOutline_route" object="${routeoutline}" link="true" linkPath="/admin/gtfs/routes" z="user-managed"/>
            <field:display field="agency" id="s_org_busko_routemanager_model_transit_community_RouteOutline_agency" object="${routeoutline}" z="4OFtaVIdJPgdCOWOSXduIA+El1w="/>
            <field:display field="fileData" id="s_org_busko_routemanager_model_transit_community_RouteOutline_fileData" object="${routeoutline}" render="false" z="user-managed"/>
        </div>
    </page:show>
</div>
